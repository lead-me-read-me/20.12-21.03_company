0. 어플리케이션 컨텍스트 ??

1. 코드 수행의 두가지 `상태`
  1.1. 어플리케이션 셋업 상태
    - 어플리케이션이 암묵적으로 모듈 레벨에 있다.
    - Flask 객체가 초기화될때 시작되고, 첫 요청을 받았을 때 암묵적으로 종료된다.
    - 이 상태에서 아래의 가정이 성립함.
       1) 개발자는 어플리케이션 객체를 안전하게 수정 가능함.
       2) 현재까지 어떤 요청도 처리되지 않았다.
       3) 어플리케이션 객체 수정시, 그 객체에 대한 참조를 가져야한다.
       4) 현재 생성하고 수정하고 있는 어플리케이션 객체에 대한
          참조를 줄 수 있는 어떤 매직 프록시(magic proxy)는 존재하지 않는다.
  1.2. 요청 처리 상태
    - 요청이 살아있는 동안, 컨텍스트 로컬 객체(flask.request 외 몇가지 객체들)가 현재 요청을 가리킨다.
    - 어떤 코드도 언제든지 이 컨텍스트 로컬 객체를 가질 수 있다.

2. 어플리케이션 컨텍스트의 목적
  2.1. ??

3. 어플리케이션 컨텍스트 생성
  3.1. 임의적인 방식
    - 요청 컨텍스트가 들어올 때마다, 어플리케이션 컨텍스트가 필요한 경우, 바로 옆에 생성된다.
        --> 어플리케이션 컨텍스트가 필요없다면 무시할 수 있다.
  3.2. app_context() 메서드 사용하는 방식
```python
from flask import Flask, current_app

app = Flask(__name__)
with app.app_context():
    # within this block, current_app points to app.
    print(current_app.name)
```
